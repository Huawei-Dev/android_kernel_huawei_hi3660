/*--------------------------------------------------------------------------------------------------------------------------*/
/*!!Warning: This is a key information asset of Huawei Tech Co.,Ltd                                                         */
/*CODEMARK:kOyQZYzjDpyGdBAEC2GaWinjiDDUykL9e8pckESWBbMVmSWkBuyJO01cTiy3TdzKxGk0oBQa
mSMf7J4FkTpfv/JzwTgKEHe/9N4yU5rqhEDlG50G/Vcvyq2txYFjqt/X5GLe/SnYbE4r/A06
+TaRl4zlK+ol0IGj7i0oomTObFW9Pv6r+mzauZQzGa25N2IO96GJmFIStfNRQ3tWM1F8tFMW
Vw6FPwSi1zKWE9T/vymDQip2Ybuu4TWmf0N3frqy2EjhO7Ham5kRSrUaOMxMOw==*/
/*--------------------------------------------------------------------------------------------------------------------------*/

#ifndef __FSP_HEADER__
#define __FSP_HEADER__

#ifdef __cplusplus
extern "C"{
#endif

#include "public.h"
#include "vfmw.h"
#include "syn_cmn.h"

#define USE_FSP  1


#define FSP_OK     0
#define FSP_ERR   -1
#define FSP_WAIT_ARRANGE 2

#define FS_DISP_STATE_NOT_USED        0
#define FS_DISP_STATE_ALLOCED         1
#define FS_DISP_STATE_DEC_COMPLETE    2
#define FS_DISP_STATE_WAIT_DISP       3

#define MAX_PMV_NUM          MAX_PMV_SLOT_NUM


#define  FSP_ASSERT_RET( cond, else_print )								\
do {																	\
	if( !(cond) )														\
	{																	\
		dprint(PRN_FATAL,"fsp.c,L%d: %s\n", __LINE__, else_print );		\
		return FSP_ERR;													\
	}																	\
}while(0)

#define  FSP_ASSERT( cond, else_print )									\
do {																	\
	if( !(cond) )														\
	{																	\
		dprint(PRN_FATAL,"fsp.c,L%d: %s\n", __LINE__, else_print );		\
		return;															\
	}																	\
}while(0)

/* ?????????????? */
typedef enum 
{
    FSP_PHY_FS_TYPE_DECODE,
    FSP_PHY_FS_TYPE_DISPLAY,
    FSP_PHY_FS_TYPE_BUTT
} FSP_PHY_FS_TYPE_E;

/* ?????????????????? */
typedef enum 
{
    FSP_PHY_FS_STORE_TYPE_FRAME,
    FSP_PHY_FS_STORE_TYPE_FIELD,
    FSP_PHY_FS_STORE_TYPE_BUTT
} FSP_PHY_FS_STORE_TYPE_E;

typedef enum
{
    LFS_PMV_STATE_NOT_USE,
    LFS_PMV_STATE_ALLOCATED,
    LFS_PMV_STATE_VALID,
    LFS_PMV_STATE_BUTT
} LFS_PMV_STATE_E;

/* FSP???????????? */
typedef struct hiFSP_INST_CFG_S
{
	SINT8     s32DispLoopEnable;

	SINT8     s32ExpectedDecFsNum;
	SINT8     s32ExpectedDispFsNum;
	SINT8     s32ExpectedPmvNum;

	SINT32    s32DecFsWidth;
	SINT32    s32DecFsHeight;

	SINT32    s32DispFsWidth;
	SINT32    s32DispFsHeight;
} FSP_INST_CFG_S;


/* ?????????????? */
typedef struct hiFSP_PHY_FS_S
{
	SINT8     IsDecRef;
	SINT8     DispState;

    SINT32    PhyFsID;
    FSP_PHY_FS_STORE_TYPE_E  eStoreType;
    UADDR     PhyAddr;
    UADDR     LineNumAddr;
	SINT32    Stride;
	SINT32    FsWidth;
	SINT32    FsHeight;
	SINT32    ChromOffset;  
	UINT32    u32Tick;
} FSP_PHY_FS_S;

/* ?????????????? */
typedef struct hiFSP_LOGIC_FS_S
{
	SINT8             s32IsRef;
	SINT8             s32DispState;
	SINT8             IsDummyFs;
	SINT8             s32LogicFsID;
    SINT8             PmvIdc;
	IMAGE             stDispImg;

	UINT32            u32Tick;
    LFS_PMV_STATE_E   eLfsPmvState;
	
	FSP_PHY_FS_S      *pstDecodeFs;
	FSP_PHY_FS_S      *pstDispOutFs;
	FSP_PHY_FS_S      *pstTfOutFs;

    UADDR             PmvAddr;
	SINT32            HalfPmvOffset;

    UINT32            TR;
} FSP_LOGIC_FS_S;

/* ?????????????????? */
typedef struct hiFSP_PRE_INF_S
{
    SINT32           s32PreWidth;      // ?????????????????????????????????? 4+64 ??????????
    SINT32           s32PreHeight;
    SINT32           s32PreDecNum;   // ????????????????????????????????????????????????????????????????????????
    SINT32           s32PreDecSlotLen;
   
} FSP_PRE_INF_S;

/* FSP???????????? */
typedef enum hiFSP_INST_STATE_E
{
    FSP_INST_STATE_NULL,
	FSP_INST_STATE_INUSE,
	FSP_INST_STATE_BUTT
} FSP_INST_STATE_E;


typedef enum hiFSP_PARTITION_STATE
{
    FSP_PARTITION_STATE_FIRST = 0, /*??????????*/
    FSP_PARTITION_STATE_WAIT,      /*????????*/
    FSP_PARTITION_STATE_SUCCESS,   /*????????*/
    FSP_PARTITION_STATE_FAIL,      /*????????*/
}FSP_PARTITION_STATE_E;

/* ?????????? */
typedef struct hiFSP_INST_S
{
	/* ???????????? */
	SINT8             s32InstID;
    SINT8             IsOmxPath;
	FSP_INST_STATE_E  eFspInstState;

    SINT8             s8SizeChangeFlag; 
    
	SINT8             s8TotalValidFsNum;
	SINT8             s32DecFsNum;
	SINT8             s32DispFsNum;
	SINT8             s32TfFsNum;

	SINT8             s32PmvNum;
	SINT8             IsPmvInUse[MAX_PMV_NUM];

	UINT32            u32InstTick;

    FSP_PRE_INF_S     stPreInfo;
    FSP_INST_CFG_S    stInstCfg;
    
	FSP_LOGIC_FS_S    stLogicFs[MAX_FRAME_NUM];
	FSP_PHY_FS_S      stDummyPhyFs;

	FSP_PHY_FS_S      stDecFs[MAX_FRAME_NUM];
	FSP_PHY_FS_S      stDispFs[MAX_FRAME_NUM];
	FSP_PHY_FS_S      stTfFs[2]; 

    /* PMV???????? */
	SINT32            s32HalfPmvOffset;
    UADDR             PmvAddr[MAX_PMV_NUM];
    /*????????????*/
    FSP_PARTITION_STATE_E eFspPartitionState;

} FSP_INST_S;

typedef struct hiFSP_ATTR_S
{
    SINT8   IsOmxPath;
}FSP_ATTR_S;

/* ?????????????????? */
typedef struct FSP_INST_INFO_S
{
    /* PMV???????? */
	SINT8             s32PmvNum;
	/* ???????????? */
	SINT8             s32DecFsNum;
	SINT8             s32DispFsNum;
	SINT8             s32TfFsNum;
	SINT8             s32InstID;

	FSP_PHY_FS_S      stDecFs[MAX_FRAME_NUM]; 	

	SINT32            s32DecFsSize;
} FSP_INST_INFO_S;

typedef struct FSP_OMX_INTF_S
{
	EXT_FN_BUFFER_CALLBACK  pfnBufferHandler;
} FSP_OMX_INTF_S;

/***********************************************************************
    ??????????
 ***********************************************************************/
VOID FSP_Init(VOID);

/***********************************************************************
    ????????
 ***********************************************************************/
VOID  FSP_Exit(VOID);

/***********************************************************************
    ????????????????
 ***********************************************************************/
SINT32 FSP_ConfigAttribute(SINT32 InstID, FSP_ATTR_S *pstAttr);

/***********************************************************************
    ????????
    ????????????FSP_OK??????????FSP_ERR
 ***********************************************************************/
SINT32  FSP_EnableInstance(SINT32  InstID);

/***********************************************************************
    ????????
 ***********************************************************************/
VOID  FSP_DisableInstance(SINT32 InstID);

/***********************************************************************
    ????????
    ????????????FSP_OK??????????FSP_ERR
 ***********************************************************************/
SINT32  FSP_ResetInstance(SINT32  InstID);

/***********************************************************************
    ????????
    ????????????????????????????????????????????????????????????????????
    ????????????????FSP??????????????????????????????????????????????????
    ??????????
    ??FSP_ResetInstance()??????????????????????????????????????????????????
    ????????????????????????????????
    ????????????FSP_OK??????????FSP_ERR
 ***********************************************************************/
SINT32  FSP_EmptyInstance(SINT32  InstID);

/***********************************************************************
    ??????????????VO QUEUE ????????
 ***********************************************************************/
SINT32 FSP_ClearNotInVoQueue(SINT32 InstID,IMAGE_VO_QUEUE *pstVoQue);

/***********************************************************************
    ????????
 ***********************************************************************/
SINT32  FSP_ConfigInstance( SINT32 InstID,  FSP_INST_CFG_S *pstFspInstCfg );

/***********************************************************************
    ????????
 ***********************************************************************/
SINT32  FSP_PartitionFsMemory ( SINT32 InstID, UADDR MemPhyAddr, SINT32 MemSize, SINT32 *UsedMemSize );

/***********************************************************************
    ????????????????
    VDH????????????????????????"???????????? + ??ID"????????
 ***********************************************************************/
VOID  FSP_GetDecodeFrameTable(SINT32 InstID, UADDR PhyAddr[], SINT32 *pFsNum);

/***********************************************************************
    ????????PMV??????
    VDH????PMV??????????????"PMV?????? + PMV ID"????????
 ***********************************************************************/
VOID  FSP_GetDecodePmvTable(SINT32 InstID, UADDR PhyAddr[], SINT32 *pPmvNum);

/***********************************************************************
    ??????????????
    InstID: ????ID
    NeedPhyFs: ??????????????????????????H.264??????gap????????????????
               ????????????????????????????????????????.
               
    ????????????????ID??????????-1
 ***********************************************************************/
SINT32  FSP_NewLogicFs ( SINT32 InstID, SINT32 NeedPhyFs );

/***********************************************************************
    ??????????
    ????????????????????????????????????????????????????????????????????
    ??????????????TF????????????????????????????????????????????????????
    ????????????????????????
    HoldDispFs: ??????????????????????????????????1??????????????????????
                ????????????????????????????????????????????????????
                ????HoldDispFs????????????????????????????????????????.
 ***********************************************************************/
VOID FSP_ClearLogicFs( SINT32 InstID, SINT32 LogicFrameID, SINT32 HoldDispFs);

/***********************************************************************
    ????????????????????, ????????????TF??????
    IsRef = 1??????????????????????????????????????
 ***********************************************************************/
VOID  FSP_SetRef ( SINT32 InstID, SINT32 LogicFrameID, SINT32 IsRef );

/***********************************************************************
    ????????????????????????
 ***********************************************************************/
SINT32  FSP_GetRef ( SINT32 InstID, SINT32 LogicFrameID );

/***********************************************************************
    ??????????????????????
 ***********************************************************************/
VOID  FSP_SetDisplay ( SINT32 InstID, SINT32 LogicFrameID, SINT32 IsWaitDisp );

/***********************************************************************
    ??????????????????????
 ***********************************************************************/
SINT32  FSP_GetDisplay ( SINT32 InstID, SINT32 LogicFrameID );

/***********************************************************************
    ??????????????????????(????????/????????)
 ***********************************************************************/
SINT32  FSP_SetStoreType( SINT32 InstID, FSP_PHY_FS_TYPE_E ePhyFsType, SINT32 PhyFsID, FSP_PHY_FS_STORE_TYPE_E eStoreType);

/***********************************************************************
    ??????????????????????(????????/????????)
 ***********************************************************************/
FSP_PHY_FS_STORE_TYPE_E  FSP_GetStoreType( SINT32 InstID, FSP_PHY_FS_TYPE_E ePhyFsType, SINT32 PhyFsID);

/***********************************************************************
    ????????????????PMV??
    PMV????????????????????????????????????????????????PMV??????????????
    ??????????????????????PMV??(????????????PMV????????)????????????????
    ????PMV??????????????????????????????????????????????????
    ????PMV??????(????MPEG2??????3??PMV??)????????????????????????????.
 ***********************************************************************/
VOID  FSP_RemovePmv ( SINT32 InstID, SINT32 LogicFrameID );

/***********************************************************************
    ??????????
 ***********************************************************************/
FSP_LOGIC_FS_S*  FSP_GetLogicFs( SINT32 InstID, SINT32 LogicFrameID);

/***********************************************************************
    ????????????????????(????IMAGE????????????)
 ***********************************************************************/
IMAGE*  FSP_GetFsImagePtr( SINT32 InstID, SINT32 LogicFrameID);

/***********************************************************************
    ????????????????
 ***********************************************************************/
FSP_PHY_FS_S*  FSP_GetDecPhyFs( SINT32 InstID, SINT32 LogicFrameID);

/***********************************************************************
    ????????????????
 ***********************************************************************/
FSP_PHY_FS_S*  FSP_GetDispPhyFs( SINT32 InstID, SINT32 LogicFrameID);

/***********************************************************************
    ????PMV????
 ***********************************************************************/
UADDR FSP_GetPmvAddr( SINT32 InstID, SINT32 LogicFrameID );

/***********************************************************************
    ??????????????????????
    ??????????????????1??????????0
 ***********************************************************************/
SINT32  FSP_IsNewFsAvalible(SINT32 InstID);

/***********************************************************************
 ??????????????????(??????????????)???? 
 ***********************************************************************/
SINT32  FSP_IsFsLeak(SINT32 InstID);

/***********************************************************************
    ????DecFs??????
    264????????????+ID????????????????????????????????????????????????????
 ***********************************************************************/
VOID  FSP_GetDecFsAddrTab( SINT32 InstID, SINT32 *DecFsNum, SINT32 *DecFsAddrTab , SINT32 *LineNumAddrTab);

/***********************************************************************
    ????PMV??????
    264????????????+ID????????????????PMV??????????????????????PMV??????
 ***********************************************************************/
VOID  FSP_GetPmvAddrTab( SINT32 InstID, SINT32 *PmvNum, SINT32 *PmvAddrTab );

/***********************************************************************
    ????FSP????????
    ????????????????????????????????FSP????????
 ***********************************************************************/
VOID FSP_PrintContext(SINT32 InstID);

/***********************************************************************
    ????????????????????????
 ***********************************************************************/
VOID  FSP_GetInstInfo( SINT32 InstID, FSP_INST_INFO_S *pFspInstInfo );

/***********************************************************************
    ????????????????????????ID
 ***********************************************************************/
SINT32  FSP_GetLogicIdByPhyAddr( SINT32 InstID, UADDR PhyAddr);

/***********************************************************************
    ????????????????ID
    ??????????????
 ***********************************************************************/
SINT32 FSP_GetNullLogicFs(SINT32 InstID);

/***********************************************************************
    ??????????????????????????
 ***********************************************************************/
SINT32 FSP_GetTotalValidFsNum(SINT32 InstID);

/***********************************************************************
    OMX bypass????????????????????????
 ***********************************************************************/
SINT32 FSP_SetOMXInterface(FSP_OMX_INTF_S *pIntf);
  
/***********************************************************************
    ??????????OMX bypass mode
 ***********************************************************************/
SINT32 FSP_IsOmxBypassMode(SINT32 InstID);

/***********************************************************************
    OMX bypass????????????????????
 ***********************************************************************/
SINT32 FSP_ExtBufHandler(SINT32 InstID, VDEC_BC_TYPE_E type, VOID *pParam);


#ifdef __cplusplus
}
#endif

#endif

