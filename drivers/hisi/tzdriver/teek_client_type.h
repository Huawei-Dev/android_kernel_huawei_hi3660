/**
 * @file tee_client_type.h
 *
 * Copyright(C), 2008-2013, Huawei Tech. Co., Ltd. ALL RIGHTS RESERVED. \n
 *
 * ????????????????????????????????\n
 */

#ifndef _TEE_CLIENT_TYPE_H_
#define _TEE_CLIENT_TYPE_H_

#define SECURITY_AUTH_ENHANCE

#include "teek_client_list.h"
#include "teek_client_constants.h"
#include <linux/types.h>

#define TOKEN_SAVE_LEN    24

/**
 * @ingroup TEEC_COMMON_DATA
 * true????????
 */
#ifndef true
/*lint -e652 */
#define true    1
/*lint +e652 */
#endif

/**
 * @ingroup TEEC_COMMON_DATA
 * false????????
 */
#ifndef false
/*lint -e652 */
#define false   0
/*lint +e652 */
#endif

/**
 * @ingroup TEEC_COMMON_DATA
 * NULL????????
 */
#ifndef NULL
#define NULL 0
#endif

/**
 * @ingroup TEEC_COMMON_DATA
 * ??????????????????
 *
 * ????????????????????
 */
typedef uint32_t TEEC_Result;

/**
 * @ingroup TEEC_COMMON_DATA
 * UUID????????
 *
 * UUID????????RFC4122 [2]??????????????????
 */
typedef struct {
	uint32_t timeLow;
	/**< ??????????4????  */
	uint16_t timeMid;
	/**< ??????????2????  */
	uint16_t timeHiAndVersion;
	/**< ??????????2??????????????????  */
	uint8_t clockSeqAndNode[8];
	/**< ??????????????????????????  */
} TEEC_UUID;

/**
 * @ingroup TEEC_COMMON_DATA
 * TEEC_Context??????????????
 *
 * ??????????????????????????????????????????
 */
typedef struct {
	void *dev;
	uint8_t *ta_path;
	struct list_node session_list;
	/**< ????????  */
	struct list_node shrd_mem_list;
	/**< ????????????  */
} TEEC_Context;

/**
 * @ingroup TEEC_COMMON_DATA
 * TEEC_Session??????????????
 *
 * ??????????????????????????????????????
 */
typedef struct {
	uint32_t session_id;
	/**< ????ID????????????????  */
	TEEC_UUID service_id;
	/**< ??????????UUID????????????????????????UUID  */
	uint32_t ops_cnt;
	/**< ????????????????  */
	struct list_node head;
	/**< ??????????  */
	TEEC_Context *context;
	/**< ??????????????TEE????  */
#ifdef SECURITY_AUTH_ENHANCE
	/* TOKEN_SAVE_LEN_24byte = token_16byte + timestamp_8byte */
	uint8_t teec_token[TOKEN_SAVE_LEN];
#endif
} TEEC_Session;

/**
 * @ingroup TEEC_COMMON_DATA
 * TEEC_SharedMemory??????????????
 *
 * ??????????????????????????????????????
 */
typedef struct {
	void *buffer;
	/**< ????????  */
	size_t size;
	/**< ????????  */
	uint32_t flags;
	/**< ??????????????????????????????????????????#TEEC_SharedMemCtl  */
	uint32_t ops_cnt;
	/**< ??????????  */
	bool is_allocated;
	/**< ????????????????????????????????????????????  */
	struct list_node head;
	/**< ??????????????  */
	TEEC_Context *context;
	/**< ??????????TEE???? */
} TEEC_SharedMemory;

/**
 * @ingroup TEEC_COMMON_DATA
 * TEEC_TempMemoryReference??????????????
 *
 * ??????????????????????\n
 * ????????#TEEC_Parameter??????????????????????????????
 * #TEEC_MEMREF_TEMP_INPUT?? #TEEC_MEMREF_TEMP_OUTPUT????#TEEC_MEMREF_TEMP_INOUT
 */
typedef struct {
	void *buffer;
	/**< ??????????????  */
	size_t size;
	/**< ??????????????  */
} TEEC_TempMemoryReference;

/**
 * @ingroup TEEC_COMMON_DATA
 * TEEC_RegisteredMemoryReference??????????????
 *
 * ????????????????????????????????????????????????\n
 * ????????#TEEC_Parameter??????????????????????????????
 * #TEEC_MEMREF_WHOLE?? #TEEC_MEMREF_PARTIAL_INPUT??
 * #TEEC_MEMREF_PARTIAL_OUTPUT???? #TEEC_MEMREF_PARTIAL_INOUT
 */
typedef struct {
	TEEC_SharedMemory *parent;
	/**< ????????????  */
	size_t size;
	/**< ??????????????????  */
	size_t offset;
	/**< ??????????????????  */
} TEEC_RegisteredMemoryReference;

/**
 * @ingroup TEEC_COMMON_DATA
 * TEEC_Value??????????????
 *
 * ??????????????\n
 * ????????#TEEC_Parameter??????????????????????????????
 * #TEEC_VALUE_INPUT?? #TEEC_VALUE_OUTPUT????#TEEC_VALUE_INOUT
 */
typedef struct {
	uint32_t a;
	/**< ????????a  */
	uint32_t b;
	/**< ????????b  */
} TEEC_Value;

typedef struct {
	int ion_share_fd;  /**< ????????a  */
	size_t ion_size;  /**< ????????b  */
} TEEC_IonReference;

/**
 * @ingroup TEEC_COMMON_DATA
 * TEEC_Parameter??????????????
 *
 * ????#TEEC_Operation????????????????
 */
typedef union {
	TEEC_TempMemoryReference tmpref;
	/**< ????#TEEC_TempMemoryReference????  */
	TEEC_RegisteredMemoryReference memref;
	/**< ????#TEEC_RegisteredMemoryReference????  */
	TEEC_Value value;
	/**< ????#TEEC_Value????  */
	TEEC_IonReference ionref;
} TEEC_Parameter;

typedef struct {
	uint32_t event_type;
	/**Tui event type  */
	uint32_t value;
	/**return value, is keycode if tui event is getKeycode*/
} TEEC_TUI_Parameter;

/**
 * @ingroup TEEC_COMMON_DATA
 * TEEC_Operation??????????????
 *
 * ??????????????????????????????????????????????
 * ????????????????????????
 */
typedef struct {
	uint32_t started;
	/**< ????????????????????0????????????  */
	uint32_t paramTypes;
	/**????params??????????#TEEC_ParamType,
	*    ??????????#TEEC_PARAM_TYPES???????????? */
	TEEC_Parameter params[4];
	/**< ????????????????#TEEC_Parameter  */
	TEEC_Session *session;
	bool cancel_flag;
} TEEC_Operation;

#endif

