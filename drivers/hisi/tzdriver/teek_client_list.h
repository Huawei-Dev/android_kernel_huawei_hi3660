/**
 * @file tee_client_list.h
 *
 * Copyright(C), 2008-2013, Huawei Tech. Co., Ltd. ALL RIGHTS RESERVED. \n
 *
 * ????????????????????????????????\n
*/

/** @defgroup TEEC_List ??????????????????????
 *@ingroup TEEC_API
 */

#ifndef _TEE_CLIENT_LIST_H_
#define _TEE_CLIENT_LIST_H_

/**
 * @ingroup TEEC_List
 * ????????????
 */
struct list_node {
	struct list_node *next;
	/**< ????next????	*/
	struct list_node *prev;
	/**< ????prev????	*/
};

/**
 * @ingroup TEEC_List
 * @brief ????????????????
 *
 * @par ????:
 * ??????????????????????????????????????
 * @param name [IN] ??????????????
 */
#define LIST_DECLARE(name) \
	struct list_node name = { \
		.next = &name, \
		.prev = &name, \
	}

/**
 * @ingroup TEEC_List
 * ????????list??prev????
 */
#define LIST_TAIL(list) ((list)->prev)

/**
 * @ingroup TEEC_List
 * ????????list????????
 */
#define LIST_EMPTY(list) ((list) == (list)->next)

/**
 * @ingroup  TEEC_List
 * @brief ????????????????????
 *
 * @par ????:
 * ????????????????????
 *
 * @attention ??
 * @param list [IN/OUT]????????????????????????
 * @param entry [IN/OUT]??????????????????????????????
 *
 * @retval ??
 *
 * @par ????:
 * @li libteec????????????????????
 * @li tee_client_list.h??????????????????????
 * @see list_insert_tail
 * @since V100R002C00B301
 */
static inline void list_insert_head(struct list_node *list,
				    struct list_node *entry)
{
	list->next->prev = entry;
	entry->next = list->next;
	entry->prev = list;
	list->next = entry;
}

/**
 * @ingroup  TEEC_List
 * @brief ????????????????????
 *
 * @par ????:
 * ????????????????????
 *
 * @attention ??
 * @param list [IN/OUT]????????????????????????
 * @param entry [IN/OUT]??????????????????????????????
 *
 * @retval ??
 *
 * @par ????:
 * @li libteec????????????????????
 * @li tee_client_list.h??????????????????????
 * @see list_insert_head
 * @since V100R002C00B301
 */
static inline void list_insert_tail(struct list_node *list,
				    struct list_node *entry)
{
	entry->next = list;
	entry->prev = list->prev;
	list->prev->next = entry;
	list->prev = entry;
}

/**
 * @ingroup  TEEC_List
 * @brief ????????
 *
 * @par ????:
 * ??????????????
 *
 * @attention ??????????????????????????????????
 * @param entry [IN]??????????????????????????????????
 *
 * @retval ??
 *
 * @par ????:
 * @li libteec????????????????????
 * @li tee_client_list.h??????????????????????
 * @see ??
 * @since V100R002C00B301
 */
static inline void list_remove(struct list_node *entry)
{
	entry->prev->next = entry->next;
	entry->next->prev = entry->prev;
}

/**
 * @ingroup  TEEC_List
 * @brief ??????????????
 *
 * @par ????:
 * ????????????????????
 *
 * @attention ??????????????????????????????????
 * @param list [IN]????????????????????????
 *
 * @retval #NULL ????????
 * @retval ??NULL ??????????
 *
 * @par ????:
 * @li libteec????????????????????
 * @li tee_client_list.h??????????????????????
 * @see list_remove_tail
 * @since V100R002C00B301
 */
static inline struct list_node *list_remove_head(struct list_node *list)
{
	struct list_node *entry = NULL;

	if (!LIST_EMPTY(list)) {
		entry = list->next;
		list_remove(entry);
	}
	return entry;
}

/**
 * @ingroup  TEEC_List
 * @brief ??????????????
 *
 * @par ????:
 * ????????????????????
 *
 * @attention ??????????????????????????????????
 * @param list [IN]????????????????????????
 *
 * @retval NULL ????????
 * @retval ???? ??????????
 *
 * @par ????:
 * @li libteec????????????????????
 * @li tee_client_list.h??????????????????????
 * @see list_remove_head
 * @since V100R002C00B301
 */
static inline struct list_node *list_remove_tail(struct list_node *list)
{
	struct list_node *entry = NULL;

	if (!LIST_EMPTY(list)) {
		entry = list->prev;
		list_remove(entry);
	}
	return entry;
}
#endif

